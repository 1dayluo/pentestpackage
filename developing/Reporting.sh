#!/bin/bash
# ------------------------------------------------------------------
# [Leon Teale] Reporter.sh
#          Reporting Tool for Nessus and Nmap
# ------------------------------------------------------------------
# Available soon:
# 	Burp reporter
#   Nikto reporter
#   
#

## Setting Coloured variables
red=`echo -e "\033[31m"`
lcyan=`echo -e "\033[36m"`
yellow=`echo -e "\033[33m"`
green=`echo -e "\033[32m"`
blue=`echo -e "\033[34m"`
purple=`echo -e "\033[35m"`
normal=`echo -e "\033[m"`

VERSION=0.1
SUBJECT=RPTR31337
SETTINGS=$0_settings 

nessus_summary="/root/Desktop/Tools/pentestpackage/NessusParserSummary.py"
nessus_breakdown=""
nmap_parser="/root/Desktop/Tools/pentestpackage/NmapParser.py"
nmap_portcount="/root/Desktop/Tools/pentestpackage/NmapPortCount.py"

nessus_file=""
nmap_file=""
burp_file=""
nikto_file=""
whois_file=""


 
# --- Options processing -------------------------------------------

while :
do
clear
echo "---------------------------------"
echo "$yellow Reporting Tool v$VERSION$normal"
echo "---------------------------------"
echo -n -e " Current Working Dir: "
pwd
echo "---------------------------------"
echo " 1) Nessus Summary   [$nessus_file]"
echo " 2) Nessus breakdown [$nessus_file]"
echo " 3) Nmap Parse       [$nmap_file]"
echo " 4) Nmap Port Count  [$nmap_file]"
echo ""
echo " 5) Burp Parser      [$burp_file]"
echo " 6) Nikto Parser     [$nikto_file]"
echo " 7) Whois Parser     [$whois_file]"
echo " 0) exit"
echo "---------------------------------"



read opt
case $opt in

1) 	read -e -p "Enter Nessus File: " nessus
	echo ""
	read -e -p "Parse $nessus, are you sure? [Y/n]" confirm

		if [[ $confirm = n ]];
			then 
			echo "Press Enter to return"
			echo ""
			read enterkey;
		else
			echo ""
			nessus_file="$nessus"
			echo "Running Nessus Parser.."

			#Run nessus summary
			$nessus_summary $nessus_file
			echo ""
			echo "Parser finished.."
			echo ""
			echo "Output saved:"
			pwd echo -n "newfile.csv"
			echo ""


			# Summmary
			echo "Summary:"
			echo -n -e "$purple Critical: \t"
			echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i critical | wc -l)"
			echo -n -e "$red High:      \t"
			echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i high | wc -l)"
			echo -n -e "$yellow Medium:     \t"
			echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i medium | wc -l)"
			echo -n -e "$green Low:\t\t"
			echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i low | wc -l)"
			echo -n -e "$blue Info: \t\t"
			echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i info | wc -l)$normal"

		fi
	read enterkey;;

2)  echo "Enter Nessus File: "
	read nessus
	echo ""
	read -e -p "Parse $nessus, are you sure? [Y/n]" confirm
		if [[ $confirm = n ]];
			then 
			echo "Press Enter to return"
			echo ""
			read enterkey;
		else
			nessus_file="$nessus"
			echo "Running Nessus Parser.."
			
		fi
	read enterkey;;

3)  read -e -p "Enter Nmap File:" nmap
	read -e -p "Parse $nmap, are you sure? [Y/n]" confirm
		if [[ $confirm = n ]];
			then 
			echo "Press Enter to return"
			echo ""
			read enterkey;
		else
			nessus_file="$nmap"
			echo "Running Nmap Parser.."

			#Run nmap parser
			$nmap_parser $nmap_file
			echo ""
			echo "Parser finished.."
			echo ""
			echo -n "Output saved:"
			pwd echo -n "newfile.csv"
			echo ""
			
		fi
	read enterkey;;

4)  read -e -p "Enter Nmap File: " nmap_file
	echo ""
	read -e -p "Parse $nmap_file, are you sure? [Y/n]" confirm
	echo ""
		if [[ $confirm = n ]];
			then 
			echo "Press Enter to return"
			echo ""
			read enterkey;
		else
			nessus_file="$nmap"
			echo "Running Nmap Parser.."

			#Run nmap parser
			$nmap_portcount $nmap_file
			echo ""
			echo "Parser finished.."
			echo ""
			echo -n "Output saved: "
			pwd echo -n "data_nmap.csv"
			echo ""
			
			# Summmary
			echo "Summary: Hosts ($yellow$(cat data_nmap.csv | grep -vE 'Filtered' | wc -l)$normal)"
			echo -n -e "$green Open Ports: \t"
			echo "$(cat data_nmap.csv  | cut -d , -f 2 | awk '{s+=$1} END {print s}')"
			echo -n -e "$red Closed Ports: \t"
			echo "$(cat data_nmap.csv  | cut -d , -f 4 | awk '{s+=$1} END {print s}')"
		fi
	read enterkey;;

esac
done

# --- Locks -------------------------------------------------------
LOCK_FILE=/tmp/$SUBJECT.lock
if [ -f "$LOCK_FILE" ]; then
   echo "Script is already running"
   exit
fi

trap "rm -f $LOCK_FILE" EXIT
touch $LOCK_FILE

# --- Body --------------------------------------------------------
#  SCRIPT LOGIC GOES HERE
echo $param1
echo $param2
# -----------------------------------------------------------------
