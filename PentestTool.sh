#!/bin/bash
# ------------------------------------------------------------------
# [Leon Teale] pentesttool.sh
#          Pentest and Reporting Tool
# ------------------------------------------------------------------
# Available soon:
# 	Burp reporter
#   Nikto reporter
#   
#

####Template

				####### Start of $ ##########
# 				while true
# 					do
# 						clear
# 						echo "---------------------------------"
# 						echo "$yellow $Title v$VERSION$normal - Testing"
# 						echo "---------------------------------"
# 						echo -n -e " Current Working Dir: "
# 						pwd
# 						echo "---------------------------------"
# 						echo " 1) Nmap Scan   [$nessus_file]"
# 						echo " 2) Nessus breakdown [$nessus_file]"
# 						echo ""
# 						echo " 0) exit"
# 						echo "---------------------------------"

# 						read Test_opt
# 						case $Test_opt in

# 							1) read enterkey;;
							
# 							2) read enterkey;;

# 							0) 	break
# 							    ;;

# 							*)  echo "That is not a valid choice"
# 							    ;;
# 						esac
# 					done
# 					read enterkey;;
# 			        ##### End Testing Tool ########




## Setting Coloured variables
red=`echo -e "\033[31m"`
lcyan=`echo -e "\033[36m"`
yellow=`echo -e "\033[33m"`
green=`echo -e "\033[32m"`
blue=`echo -e "\033[34m"`
purple=`echo -e "\033[35m"`
normal=`echo -e "\033[m"`

VERSION=2.0
SUBJECT=pentesttool31337
SETTINGS=$0_settings 
Title="Pentest Tool"

nessus_summary="/root/Desktop/Tools/pentestpackage/NessusParserSummary.py"
nessus_breakdown=""
nmap_parser="/root/Desktop/Tools/pentestpackage/NmapParser.py"
nmap_portcount="/root/Desktop/Tools/pentestpackage/NmapPortCount.py"

nessus_file=""
nmap_file=""
burp_file=""
nikto_file=""
whois_file=""
nmap_scope=""
not_completed="$red✘$normal"
completed="$green✔$normal"

 
# --- Options processing -------------------------------------------

status_nmap_full_tcp=$(if test -f "nmap-tcp-full.nmap"; then echo "$completed" ; else echo "$not_completed";fi)
status_nmap_quick_tcp=$(if test -f "nmap-quick-tcp-scan.nmap"; then echo "$completed" ; else echo "$not_completed";fi)
status_nmap_top_udp=$(if test -f "nmap-top-udp-scan.nmap"; then echo "$completed" ; else echo "$not_completed";fi)
status_nmap_developer=$(if test -f "nmap-developer-scan.nmap"; then echo "$completed" ; else echo "$not_completed";fi)
# --- Locks -------------------------------------------------------
LOCK_FILE=/tmp/$SUBJECT.lock
if [ -f "$LOCK_FILE" ]; then
   echo "Script is already running"
   exit
fi

trap "rm -f $LOCK_FILE" EXIT
touch $LOCK_FILE

#---- Body ---------------------------------------------------------

while true
	do
		clear
		echo "---------------------------------"
		echo "$yellow $Title v$VERSION$normal"
		echo "---------------------------------"
		echo -n -e " Current Working Dir: "
		pwd
		echo "---------------------------------"
		echo " 1) Testing"
		echo " 2) Reporting"
		echo ""
		echo " 0) exit"
		echo "---------------------------------"

		read Tool_opt
		case $Tool_opt in

			1)  ###### Start Testing Tool ############

				while true
					do
						clear
						echo "---------------------------------"
						echo "$yellow $Title v$VERSION$normal - Testing"
						echo "---------------------------------"
						echo -n -e " Current Working Dir: "
						pwd
						echo "---------------------------------"
						echo " 1) Nmap Scan        []"
						echo " 2) Nikto Scan       []"
						echo " 3) WPScan           []"
						echo ""
						echo " 0) exit"
						echo "---------------------------------"

						read Test_opt
						case $Test_opt in

							1)  ###### Start of nmap tool ##########
								while true
									do
										clear
										echo "---------------------------------"
										echo "$yellow $Title v$VERSION$normal - Testing"
										echo "---------------------------------"
										echo -n -e " Current Working Dir: "
										pwd
										echo "---------------------------------"
										echo " 1) Full TCP Scan      [$status_nmap_full_tcp]"
										echo " 2) Quick TCP Scan     [$status_nmap_quick_tcp]"
										echo " 3) Top UDP Scan       [$status_nmap_top_udp]"
										echo " 4) Developer Testing  [$status_nmap_developer]"
										echo ""
										echo " 0) exit"
										echo "---------------------------------"

										read nmap_opt
										case $nmap_opt in

											1)  read -e -p "Enter scope file: " nmap_scope
												echo ""
												read -e -p "Run Full TCP Scan against $nmap_scope, are you sure? [Y/n]" confirm

												if [[ $confirm = n ]];
													then 
														echo "Press Enter to return"
														echo ""
														read enterkey;
													else
														echo ""
														scope="$nmap_scope"
														echo "Running Nmap.."
														echo ""
														nmap -sS -n -v -T4 -O -Pn -A -p- -iL $scope -oA nmap-tcp-full
														echo ""
														echo "Scan Finished.."
														status_nmap_full_tcp=$completed
												fi
												read enterkey;;
											
											2)  read -e -p "Enter scope file: " nmap_scope
												echo ""
												read -e -p "Run Quick TCP Scan against $nmap_scope, are you sure? [Y/n]" confirm

												if [[ $confirm = n ]];
													then 
														echo "Press Enter to return"
														echo ""
														read enterkey;
													else
														echo ""
														scope="$nmap_scope"
														echo "Running Nmap.."
														echo ""
														nmap -sS -n -v -T4 -Pn -O -oA nmap-quick-tcp-scan -iL $scope
														echo ""
														echo "Scan Finished.."
														status_nmap_quick_tcp=$completed
												fi
												read enterkey;;

											3)  read -e -p "Enter scope file: " nmap_scope
												echo ""
												read -e -p "Run Top UDP Scan against $nmap_scope, are you sure? [Y/n]" confirm

												if [[ $confirm = n ]];
													then 
														echo "Press Enter to return"
														echo ""
														read enterkey;
													else
														echo ""
														scope="$nmap_scope"
														echo "Running Nmap.."
														echo ""
														nmap -sU -T4 -v -v -iL $scope -oA nmap-top-udp-scan -Pn --top-ports 1024
														echo ""
														echo "Scan Finished.."
														status_nmap_top_udp=$completed
												fi
												read enterkey;;

											4)  read -e -p "Enter scope file: " nmap_scope
												echo ""
												read -e -p "Run Developer Scan against $nmap_scope, are you sure? [Y/n]" confirm

												if [[ $confirm = n ]];
													then 
														echo "Press Enter to return"
														echo ""

														read enterkey;
													else
														echo ""
														scope="$nmap_scope"
														echo "Running Nmap.."
														echo ""
														nmap -p 80 -oA nmap-developer-scan -iL $scope
														echo ""
														echo "Scan Finished.."
														status_nmap_developer=$completed
												fi
												read enterkey;;

											0) 	break
											    ;;

											*)  echo "That is not a valid choice"
											    ;;
										esac
									done
									read enterkey;;
							        ##### End nmap Tool ########

								
							
							2) read enterkey;;

							0) 	break
							    ;;

							*)  echo "That is not a valid choice"
							    ;;
						esac
					done
					read enterkey;;
			        ##### End Testing Tool ########


			2)  ###### Start Reporting Tool ############

				while true
					do
						clear
						echo "---------------------------------"
						echo "$yellow $Title v$VERSION$normal - Reporting"
						echo "---------------------------------"
						echo -n -e " Current Working Dir: "
						pwd
						echo "---------------------------------"
						echo " 1) Nessus Summary   [$nessus_file]"
						echo " 2) Nessus breakdown [$nessus_file]"
						echo " 3) Nmap Parse       [$nmap_file]"
						echo " 4) Nmap Port Count  [$nmap_file]"
						echo ""
						echo " 5) Burp Parser      [$burp_file]"
						echo " 6) Nikto Parser     [$nikto_file]"
						echo " 7) Whois Parser     [$whois_file]"
						echo ""
						echo " 0) exit"
						echo "---------------------------------"

						read Rep_opt
						case $Rep_opt in

							1) 	read -e -p "Enter Nessus File: " nessus
								echo ""
								read -e -p "Parse $nessus, are you sure? [Y/n]" confirm

									if [[ $confirm = n ]];
										then 
											echo "Press Enter to return"
											echo ""
											read enterkey;
										else
											echo ""
											nessus_file="$nessus"
											echo "Running Nessus Parser.."

											#Run nessus summary
											$nessus_summary $nessus_file
											echo ""
											echo "Parser finished.."
											echo ""
											echo "Output saved:"
											pwd echo -n "newfile.csv"
											echo ""


											# Summmary
											echo "Summary:"
											echo -n -e "$purple Critical: \t"
											echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i critical | wc -l)"
											echo -n -e "$red High:      \t"
											echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i high | wc -l)"
											echo -n -e "$yellow Medium:     \t"
											echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i medium | wc -l)"
											echo -n -e "$green Low:\t\t"
											echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i low | wc -l)"
											echo -n -e "$blue Info: \t\t"
											echo "$(cat newfile.csv  | cut -d , -f 2 | grep -i info | wc -l)$normal"

									fi
								read enterkey;;

							2)  echo "Enter Nessus File: "
								read nessus
								echo ""
								read -e -p "Parse $nessus, are you sure? [Y/n]" confirm
									if [[ $confirm = n ]];
										then 
											echo "Press Enter to return"
											echo ""
											read enterkey;
										else
											nessus_file="$nessus"
											echo "Running Nessus Parser.."
									fi
								read enterkey;;

							3)  read -e -p "Enter Nmap File:" nmap
								read -e -p "Parse $nmap, are you sure? [Y/n]" confirm
									if [[ $confirm = n ]];
										then 
											echo "Press Enter to return"
											echo ""
											read enterkey;
										else
											nessus_file="$nmap"
											echo "Running Nmap Parser.."

											#Run nmap parser
											$nmap_parser $nmap_file
											echo ""
											echo "Parser finished.."
											echo ""
											echo -n "Output saved:"
											pwd echo -n "newfile.csv"
											echo ""
									fi
								read enterkey;;

							4)  read -e -p "Enter Nmap File: " nmap_file
								echo ""
								read -e -p "Parse $nmap_file, are you sure? [Y/n]" confirm
								echo ""
									if [[ $confirm = n ]];
										then 
											echo "Press Enter to return"
											echo ""
											read enterkey;
										else
											nessus_file="$nmap"
											echo "Running Nmap Parser.."

											#Run nmap parser
											$nmap_portcount $nmap_file
											echo ""
											echo "Parser finished.."
											echo ""
											echo -n "Output saved: "
											pwd echo -n "data_nmap.csv"
											echo ""
											
											# Summmary
											echo "Summary: Hosts ($yellow$(cat data_nmap.csv | grep -vE 'Filtered' | wc -l)$normal)"
											echo -n -e "$green Open Ports: \t"
											echo "$(cat data_nmap.csv  | cut -d , -f 2 | awk '{s+=$1} END {print s}')"
											echo -n -e "$red Closed Ports: \t"
											echo "$(cat data_nmap.csv  | cut -d , -f 4 | awk '{s+=$1} END {print s}')"
									fi
								read enterkey;;

							0) 	break
							    ;;

							*)  echo "That is not a valid choice"
							    ;;
						esac
					done
					read enterkey;;
			        ##### End Reporting Tool ########

			0) 	break
				;;

			*)	echo "That is not a valid choice"
				;;

		esac
	done